#!/usr/bin/env python
# license removed for brevity

import rospy

# Brings in the SimpleActionClient
import actionlib
# Brings in the .action file and messages used by the move base action
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from std_msgs.msg import String

def movebase_client(data):
    if (data.data=='Start'):
      counter=0
      while counter<4:
        if (counter%2 == 0):
          location='Pengambilan'
        else:
          location='Peletakkan'
        send_robot_goals(location)
        counter=counter+1
        rospy.loginfo(counter)

      msg='Stop'
      start_pub = rospy.Publisher('start', String, queue_size=10)
      start_pub.publish(msg)


def send_robot_goals(location):
    status_pub = rospy.Publisher('status', String, queue_size=10)
   # Create an action client called "move_base" with action definition file "MoveBaseAction"
    client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
 
   # Waits until the action server has started up and started listening for goals.
    client.wait_for_server()

   # Creates a new goal with the MoveBaseGoal constructor
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
    if (location=='Pengambilan'):
        goal.target_pose.pose.position.x = 0.5
   # No rotation of the mobile base frame w.r.t. map frame
        goal.target_pose.pose.orientation.w = 1.0
   # Lokasi Peletakkan
    else :
        goal.target_pose.pose.position.x = -0.6
   # No rotation of the mobile base frame w.r.t. map frame
        goal.target_pose.pose.orientation.w = 1.

   # Sends the goal to the action server.
    client.send_goal(goal)
    status = "Pergerakan Robot Dimulai" 
    status_pub.publish(status)

   # Waits for the server to finish performing the action.
    wait = client.wait_for_result()
   # If the result doesn't arrive, assume the Server is not available
    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available!")
    else:
    # Result of executing the action
        result = client.get_result()
        if result:
            rospy.loginfo("Goal execution done!")
            status = "Robot Berhenti" 
            status_pub.publish(status)

# If the python node is executed as main process (sourced directly)
if __name__ == '__main__':
    try:
       # Initializes a rospy node to let the SimpleActionClient publish and subscribe
        rospy.init_node('movebase_client_py')
        rospy.Subscriber('start', String, movebase_client)
        ##result = movebase_client()
        ##if result:
            ##rospy.loginfo("Goal execution done!")
        rospy.spin()
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation test finished.")
